name: Deploy App to AWS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.1'

      - name: Create .env file
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
          echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
          echo "RAZORPAY_KEY_ID=${{ secrets.RAZORPAY_KEY_ID }}" >> .env
          echo "RAZORPAY_KEY_SECRET=${{ secrets.RAZORPAY_KEY_SECRET }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "SOCIAL_AUTH_GOOGLE_CLIENT_ID=${{ secrets.SOCIAL_AUTH_GOOGLE_CLIENT_ID }}" >> .env
          echo "SOCIAL_AUTH_GOOGLE_SECRET=${{ secrets.SOCIAL_AUTH_GOOGLE_SECRET }}" >> .env

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/goroute:latest --build-arg SERVICE=web .
          docker push ${{ secrets.DOCKER_USERNAME }}/goroute:latest

      - name: Debugging AWS Configuration
        run: |
          # Print the AWS connection variables to check their values
          echo "AWS_IP is: ${{ secrets.AWS_IP }}"
          echo "AWS_USER is: ${{ secrets.AWS_USER }}"
          echo "AWS_KEY is set: ${{ secrets.AWS_KEY != '' }}"
          echo "Checking if AWS IP is reachable..."
          ping -c 3 ${{ secrets.AWS_IP }} || echo "⚠️ Cannot reach AWS IP"

      - name: Verify SSH Key Format
        run: |
          # Ensure the AWS SSH key is properly formatted
          echo "${{ secrets.AWS_KEY }}" | tr -d '\r' > aws.pem
          chmod 600 aws.pem
          ls -lah aws.pem

      - name: Add AWS to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AWS_IP }} >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      - name: Deploy to AWS EC2
        env:
          AWS_KEY: ${{ secrets.AWS_KEY }}
          AWS_IP: ${{ secrets.AWS_IP }}
          AWS_USER: ${{ secrets.AWS_USER }}
        run: |
          # Write the AWS SSH private key to a file and secure it
          echo "$AWS_KEY" > aws.pem
          chmod 600 aws.pem
          
          # Print out the environment variables before proceeding
          echo "Deploying to AWS IP: $AWS_IP with User: $AWS_USER"

          # Copy the .env file to the AWS instance
          echo "Copying .env file to AWS EC2"
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i aws.pem .env "$AWS_USER@$AWS_IP:/home/$AWS_USER/.env"
          
          # SSH into the AWS instance and run the deployment commands
          echo "SSH'ing into AWS EC2 to start deployment"
          ssh -o StrictHostKeyChecking=no -i aws.pem "$AWS_USER@$AWS_IP" <<EOF
          set -e
          echo "Starting deployment on AWS instance"

          # Log in to Docker on the remote host
          echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Remove any existing container named 'goroute'
          docker rm -f goroute || true

          # Pull the latest image from Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/goroute:latest

          # Create a Docker network (if it doesn't exist)
          docker network create goroute || true

          # Start Redis
          docker run -d --name redis --network goroute -p 6379:6379 redis:latest

          # Start Postgres
          docker run -d \
            --name postgres-db \
            -e POSTGRES_DB=goroute_pjt \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=admin123 \
            -v postgres_data:/var/lib/postgresql/data \
            -p 5432:5432 \
            --restart unless-stopped \
            postgres:latest

          # Start the application container
          docker run -d \
            --name goroute \
            --network goroute \
            -p 8000:8000 \
            -e DB_HOST=postgres-db \
            -e DB_NAME=goroute_pjt \
            -e DB_USER=postgres \
            -e DB_PASSWORD=admin123 \
            -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --restart unless-stopped \
            ${{ secrets.DOCKER_USERNAME }}/goroute:latest

          echo "Deployment completed!"
          EOF
